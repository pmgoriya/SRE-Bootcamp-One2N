name: Project CI

on:
    push:
        branches: [master]
        paths:
            - 'students_fastapi/**'
    workflow_dispatch:

permissions:
    contents: write
    actions: read

jobs:
    test-and-release:
        runs-on: self-hosted

        env:
            IMAGE_NAME: pmgoriya/one2n-sre-bootcamp
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
            DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
              with:
                fetch-depth: 0

            - name: Run Linter
              run: make lint

            - name: Lint Dockerfile
              run: hadolint Dockerfile

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                node-version: '18'

            - name: Install Semantic Release
              run: npm install --save-dev semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/npm @semantic-release/exec @semantic-release/git

            - name: Store Old Version
              id: old_version
              run: echo "OLD_VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_OUTPUT

            - name: Run Semantic Release
              run: npx semantic-release
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Check for New Release
              id: check_release
              run: |
                NEW_VERSION=$(cat package.json | jq -r .version)
                echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
                if [ "$NEW_VERSION" != "${{ steps.old_version.outputs.OLD_VERSION }}" ]; then
                  echo "RELEASE_CREATED=true" >> $GITHUB_OUTPUT
                  echo "New release created: $NEW_VERSION"
                else
                  echo "RELEASE_CREATED=false" >> $GITHUB_OUTPUT
                  echo "No new release created"
                fi

            - name: Build and Push Docker Image
              if: steps.check_release.outputs.RELEASE_CREATED == 'true'
              run: |
                docker build -t $IMAGE_NAME:v${{ steps.check_release.outputs.NEW_VERSION }} .
                echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                docker push $IMAGE_NAME:v${{ steps.check_release.outputs.NEW_VERSION }}

            - name: Update Helm Values
              if: steps.check_release.outputs.RELEASE_CREATED == 'true'
              run: |
                sed -i "/rest-api:/,/image:/s|tag: \".*\"|tag: \"v${{ steps.check_release.outputs.NEW_VERSION }}\"|" helm/student-api-stack/values.yaml
                git config user.name "GitHub Action"
                git config user.email "action@github.com"
                git add helm/student-api-stack/values.yaml
                git diff --staged --quiet || git commit -m "chore: update image tag to v${{ steps.check_release.outputs.NEW_VERSION }} [skip ci]"
                git push || echo "No changes to push"